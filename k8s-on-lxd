#!/usr/bin/python3

import json
import models


def cleanup(client, log):
    instances_to_delete = []
    for i in client.instances.all():
        if i.name.startswith('k8s-lxd'):
            log.info('found ' + i.name)
            instances_to_delete.append(i)

    for i in instances_to_delete:
        i.stop(wait=True)
        i.delete()
        log.info(i.name + ' deleted')


def get_clusters(client, log):
    '''
    find clusters from json embedded in Instance descriptions.
    using these cluster names, construct and return list of Cluster objects.
    '''
    cluster_tags_found = []
    for i in client.instances.all():
        cluster_tags_found.append(i.description)

    distinct_tags = []
    for t in cluster_tags_found:
        try:
            unmarshalled_json = json.loads(t)
            if unmarshalled_json["k8s-lxd-managed"]:
                if unmarshalled_json["name"] not in distinct_tags:
                    distinct_tags.append(unmarshalled_json["name"])
        except json.decoder.JSONDecodeError:
            continue

    clusters = []
    for t in distinct_tags:
        c = models.Cluster(t)
        c.fetch_members(client)
        clusters.append(c)
    return clusters


if __name__ == '__main__':
    def privileged_main():
        import pylxd
        import logging
        import argparse

        logging.basicConfig(level=logging.INFO,
                            format='%(funcName)s(): %(message)s')
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        client = pylxd.Client()

        parser = argparse.ArgumentParser()
        parser.add_argument('--create', action='store_true')
        parser.add_argument('-n', type=int, default=3)
        parser.add_argument('--clean', action='store_true')
        parser.add_argument('--block-devices', type=int, default=0)
        parser.add_argument('--name', type=str, default='default')
        parser.add_argument('--delete', action='store_true')
        parser.add_argument('--list', action='store_true')
        args = parser.parse_args()

        if args.clean:
            cleanup(client, logger)

        if args.list:
            clusters = get_clusters(client, logger)
            for c in clusters:
                logger.info('found cluster ' + c.name)

        if args.delete:
            clusters = get_clusters(client, logger)
            for c in clusters:
                if c.name == args.name:
                    logger.info('deleting cluster ' + c.name)
                    c.delete(client, logger)

        if args.create:
            k8s = models.Cluster(args.name)
            k8s.create(args.n, client, logger)
            logger.info(k8s.members)

            kubeconfig_text = k8s.fetch_kubeconfig(logger)
            with open('kubeconfig.yml', 'w') as kubeconfig_yml:
                kubeconfig_yml.truncate()
                kubeconfig_yml.write(kubeconfig_text)
            logger.info('to access cluster, execute: export KUBECONFIG=$(realpath kubeconfig.yml)')

    privileged_main()
